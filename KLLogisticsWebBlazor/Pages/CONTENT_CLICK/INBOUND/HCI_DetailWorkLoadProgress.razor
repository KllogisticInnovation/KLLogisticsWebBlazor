@using System.Net
@using System.Text
@using KLLogisticsWebBlazor.Config;
@using Newtonsoft.Json;
@inject HttpClient Http

<MudDialog DisableSidePadding="true" Class="dialog" Style="width:1050px; border-radius:20px;">
    <DialogActions>
        <button class="btnclose" type="submit" onclick="@Ok">CLOSE</button>
    </DialogActions>

    <DialogContent>
        <MudContainer Style="height: auto; width:1050px; border-radius:30px;">
            @if (Loading)
            {
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            }
            else
            {
                <div class="bx-container">
                    <div class="Header-Grid-Item-2">
                        <a>DETAIL WORKING PROGRESS</a>
                    </div>
                    <MudDataGrid Items="@Working_Detail_Inbound" Filterable="true" FilterMode="@_filterMode" >
                        <Columns>
                            <PropertyColumn Property="x => x.WHSEID" Filterable="false" CellStyle="Font-size:10px;" />
                            <PropertyColumn Property="x => x.TYPE" Filterable="true" CellStyle="Font-size:10px;" />
                            <PropertyColumn Property="x => x.PIB" Filterable="true" CellStyle="Font-size:10px;" />
                            <PropertyColumn Property="x => x.CONTAINER" Filterable="true" CellStyle="Font-size:10px;" />
                            <PropertyColumn Property="x => x.STATUS" Filterable="true" CellStyle="Font-size:10px;" />
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="GetworkingDetail_Inbound" />
                        </PagerContent>
                    </MudDataGrid>
                </div>
            }

        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    public List<GetworkingDetail_Inbound>? Working_Detail_Inbound = new List<GetworkingDetail_Inbound>();
    private bool Loading = false;
    DataGridFilterMode _filterMode = DataGridFilterMode.Simple;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Loading = true;
        await GetWorkingDetail();
        Loading = false;
    }

    public async Task GetWorkingDetail()
    {
        string Date;
    backhere:
        try
        {
            Http.CancelPendingRequests();
            //string Date = DateTime.Now.ToString("yyyy-MM-dd");
            if (Stringclass.SaveDatenow == null)
            {
                goto backhere;
            }
            else
            {
                Date = Stringclass.SaveDatenow;
            }

            var GetWorking_Detail = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/INBOUND/InboundSpRunning/&aqoonsiHCIJBK/&TAARIIKHDA{Date}/&XULASHADATALOLocal/&PARAAMETER6/");
            if (GetWorking_Detail.IsSuccessStatusCode == true)
            {
                var GetWorking_Detail_Convert = await GetWorking_Detail.Content.ReadAsStringAsync();

                if (GetWorking_Detail_Convert == null)
                {
                    goto backhere;
                }
                else
                {
                    Working_Detail_Inbound = JsonConvert.DeserializeObject<List<GetworkingDetail_Inbound>>(GetWorking_Detail_Convert);
                }
            }
            else
            {
                goto backhere;
            }

        }
        catch (WebException ex)
        {
            goto backhere;
        }

    }


    private void Ok()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
}


