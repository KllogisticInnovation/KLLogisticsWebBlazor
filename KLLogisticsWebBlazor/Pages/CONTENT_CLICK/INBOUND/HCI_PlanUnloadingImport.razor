@using System.Net
@using System.Text
@using KLLogisticsWebBlazor.Config;
@using Newtonsoft.Json;
@inject HttpClient Http


<MudDialog DisableSidePadding="true" Class="dialog" Style="width:630px; border-radius:20px;">
    <DialogActions>
        <button class="btnclose" type="submit" onclick="@Ok">CLOSE</button>
    </DialogActions>

    <DialogContent>
        <MudContainer Style="height: 400px; width:600px; ">
            @if (Loading)
            {
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            }
            else
            {
                <div class="bx-container">
                    <div class="Header-Grid-Item-2">
                        <a>WORKLOAD UNLOADING IMPORT</a>
                    </div>
                    <SfChart Height="350px" Width="500px">
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                        <ChartSeriesCollection>
                            <ChartSeries DataSource="@workloadWt_Imports" Name="ACTUAL" XName="WT" YName="ACTUAL" Fill="#4CAF50" Type="ChartSeriesType.StackingColumn">
                                <ChartMarker>
                                    <ChartDataLabel Visible="true" />
                                </ChartMarker>
                            </ChartSeries>
                            <ChartSeries DataSource="@workloadWt_Imports" Name="PROCESS" XName="WT" YName="PROCESS" Fill="#F44336" Type="ChartSeriesType.StackingColumn">
                                <ChartMarker>
                                    <ChartDataLabel Visible="true" />
                                </ChartMarker>
                            </ChartSeries>
                        </ChartSeriesCollection>
                        <ChartLegendSettings Visible="true" Position="Syncfusion.Blazor.Charts.LegendPosition.Top">
                        </ChartLegendSettings>
                    </SfChart>

                </div>
            }
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    public WorkloadWt_Import[]? workloadWt_Imports;
    private bool Loading = false;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Loading = true;
        await Workload_Wt();
        Loading = false;
    }

    public async Task Workload_Wt()
    {
        string Date;
    backhere:
        try
        {
            Http.CancelPendingRequests();
            //string Date = DateTime.Now.ToString("yyyy-MM-dd");
            if (Stringclass.SaveDatenow == null)
            {
                goto backhere;
            }
            else
            {
                Date = Stringclass.SaveDatenow;
            }

            var Get_Inbound_Workload_Wt_Import = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/INBOUND/InboundSpRunning/&aqoonsiHCIJBK/&TAARIIKHDA{Date}/&XULASHADATALOLocal/&PARAAMETER4/");
            if (Get_Inbound_Workload_Wt_Import.IsSuccessStatusCode == true)
            {
                var Get_Inbound_Workload_Wt_Import_Convert = await Get_Inbound_Workload_Wt_Import.Content.ReadAsStringAsync();

                if (Get_Inbound_Workload_Wt_Import_Convert == null)
                {
                    goto backhere;
                }
                else
                {
                    workloadWt_Imports = JsonConvert.DeserializeObject<WorkloadWt_Import[]>(Get_Inbound_Workload_Wt_Import_Convert);
                }
            }
            else
            {
                goto backhere;
            }

        }
        catch (WebException ex)
        {
            goto backhere;
        }

    }


    private void Ok()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
}


