@layout MainLayout
@page "/HCI/D_OUTBOUND"
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject IDialogService DialogService
@inject HttpClient httpClient
@using KLLogisticsWebBlazor.Pages.DASHBOARD.AHI.INBOUND;
@using KLLogisticsWebBlazor.Pages.DASHBOARD.HCI.OUTBOUND;
@using MudBlazor;
@using Newtonsoft.Json;
@using System.Net.Http.Headers;
@using KLLogisticsWebBlazor.Config;
@using KLLogisticsWebBlazor.Models;
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.ProgressBar;
@using Syncfusion.Blazor.TreeGrid;
@using Syncfusion.Blazor.Data;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.DropDowns;
@inject NavigationManager NavigationManager;
@using System.Globalization;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using MudBlazor.Examples.Data.Models
@using System.Net.Http.Json
<PageTitle>OUTBOUND</PageTitle>

<div class="grid-container-2">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Centered="true" Color="@Color.Dark">
    <MudTabPanel Text="Check & Pack">

            <h1>Progress Check & Pack @DATE1</h1>
        <div class="grid-container">
          <div class="grid-item">
            <div class="card1">
                        <div class="lableplan1">PLAN GRW</div>
                        <div class="lableplan">
                            @foreach (var valueGRW2 in plangrws)
                {
                            @valueGRW2.TOTAL
                            }
                            CASE ID
                            </div>
            </div>
          </div>
                <div class="grid-item">
            <div class="card1">
                <div class="lableplan1">PLAN FLOW THRU</div>
                        <div class="lableplan">
                            @foreach (var valueft in planfts)
                {
                            @valueft.TOTAL
                            }
                            CASE ID
                        </div>
            </div>
            </div>
                <div class="grid-item">
            <div class="card1">
                        <div class="lableplan1">PLAN CUSTOMER</div>
                        <div class="lableplan">
                            @foreach (var valuecs in plancss)
                {
                            @valuecs.TOTAL
                            }
                             CASE ID
                        </div>
            </div>
            </div>
            </div>  
        <div class="grid-container">
    <div class="grid-item">
        
        <div class="card">
                        <h2>Progress GRW All Area</h2>
                        <SfProgressBar Type="ProgressType.Circular" Value="@hasilgrw" Height="175px" Width="200px" EnableRtl="false"
                                       TrackColor="#F44336" Radius="100%" InnerRadius="100%" ProgressColor="#4caF50" TrackThickness="18"
                       ProgressThickness="18" CornerRadius="CornerType.Round" Minimum="0" Maximum="100">
                <ProgressBarAnnotations>

                    <a class="textLABEL">
                       GRW
                                    @foreach (var valueGRW2 in plangrws)
                        {
                                    @valueGRW2.ACH
                                    }
                                     %
                </a>

                <ProgressBarAnnotation AnnotationAngle="0">
                            <ContentTemplate >
                            </ContentTemplate>
                        </ProgressBarAnnotation>
                    </ProgressBarAnnotations>

                </SfProgressBar>
                        <div class="container">
                            <a class="textLABEL"> On Process </a><a class="textLABEL"> Done </a>
                            @foreach (var valueGRW2 in plangrws)
                {
                            <a class="NOT_GOOD">@valueGRW2.PROSESS</a>
                            <a class="GOOD">@valueGRW2.DONE</a>

                            }

                        </div>
        </div>
    </div>
    <div class="grid-item">
                    
        <div class="card">
                        <h3>Progress Flow Thru All Area</h3>
                        <SfProgressBar Type="ProgressType.Circular" Value="@hasilFT" Height="175px" Width="200px" EnableRtl="false"
                                       TrackColor="#F44336" Radius="100%" InnerRadius="100%" ProgressColor="#4caF50" TrackThickness="18"
                                       ProgressThickness="20" CornerRadius="CornerType.Round" Minimum="0" Maximum="100">
                <ProgressBarAnnotations>
                   <a class="textLABEL">
                        FLOW THRU
                                    @hasilFTtext %
                    </a>

                    <ProgressBarAnnotation AnnotationAngle="0">
                        <ContentTemplate>
                        </ContentTemplate>
                    </ProgressBarAnnotation>
                </ProgressBarAnnotations>
            </SfProgressBar>
             <div class="container">
                            <a class="textLABEL">On Process</a> <a class="textLABEL">Done</a>
                            @foreach (var valueft in planfts)
                {
                            <a class="NOT_GOOD">@valueft.PROSESS</a>
                            <a class="GOOD">@valueft.DONE</a>
                            }

                        </div>
        </div>
    </div>
    <div class="grid-item">  
        <div class="card">
                        <h3>Progress Customer All Area</h3>
                        <SfProgressBar Type="ProgressType.Circular" Value="@hasilCS" Height="175px" Width="200px" EnableRtl="false"
                                       TrackColor="#F44336" Radius="100%" InnerRadius="100%" ProgressColor="#4caF50" TrackThickness="18"
                                       ProgressThickness="20" CornerRadius="CornerType.Round" Minimum="0" Maximum="100">

            <ProgressBarAnnotations>
                <a class="textLABEL">
                    CUSTOMER
                                    @hasilCStext %
                </a>

                <ProgressBarAnnotation AnnotationAngle="0">
                    <ContentTemplate>
                    </ContentTemplate>
                </ProgressBarAnnotation>
            </ProgressBarAnnotations>
        </SfProgressBar>
         <div class="container">
                            <a class="textLABEL">On Process</a> <a class="textLABEL">Done</a>
                            @foreach (var valueCS in plancss)
                {
                            <a class="NOT_GOOD">@valueCS.PROSESS</a>
                            <a class="GOOD">@valueCS.DONE</a>
                            }
                        </div>
        </div>

    </div>
</div>
            <div class="grid-container-2">
                <div class="grid-item">
                    <div class="card">
                <h3>Workload Check & Pack</h3>

<div class="grid-container">
       <div class="grid-item">
                     <div @onclick="OpenDialoggrw" class="card">
                        <div class="control-section" align='center'>
                            <SfChart Title="GRW DK & LK" Width="@Width" Theme="@Theme" Palettes="@palettes2">
                                <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                                <ChartEvents OnAxisLabelRender="axisLabel"></ChartEvents>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="LabelIntersectAction.Rotate45">
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis Title="Prosess Case ID GRW">
                                    <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                </ChartPrimaryYAxis>
                                <ChartSeriesCollection>

                                    <ChartSeries ColumnWidth="0.5" DataSource="@GRWDKLK" XName="Area" YName="done" Width="2" Name="done" Type="ChartSeriesType.StackingColumn">
                                            <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                    <ChartMarker>
                                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                                    </ChartMarker>
                                    </ChartSeries>
                                    <ChartSeries ColumnWidth="0.5" DataSource="@GRWDKLK" XName="Area" YName="proses" Width="2" Name="proses" Type="ChartSeriesType.StackingColumn">
                                            <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                        <ChartMarker>
                                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                                        </ChartMarker>
                                    </ChartSeries>

                                </ChartSeriesCollection>
                                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                            </SfChart>
                        </div>
                    </div>
                </div>
                <div class="grid-item">
                                <div @onclick="OpenDialogFT" class="card">
                        <div class="control-section" align='center'>
                            <SfChart Title="FLOW THRU DK & LK" Width="@Width" Theme="@Theme" Palettes="@palettes2">
                                <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                                <ChartEvents OnAxisLabelRender="axisLabel"></ChartEvents>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="LabelIntersectAction.Rotate45">
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis Title="Prosess Case ID FLOW THRU">
                                    <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                </ChartPrimaryYAxis>
                                <ChartSeriesCollection>
                                    <ChartSeries ColumnWidth="0.5" DataSource="@FTDKLK" XName="Area" YName="done" Width="2" Name="done" Type="ChartSeriesType.StackingColumn">
                                        <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                        <ChartMarker>
                                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                                        </ChartMarker>
                                    </ChartSeries>
                                    <ChartSeries ColumnWidth="0.5" DataSource="@FTDKLK" XName="Area" YName="proses" Width="2" Name="proses" Type="ChartSeriesType.StackingColumn">
                                        <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                        <ChartMarker>
                                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                                        </ChartMarker>
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                            </SfChart>
                        </div>
                    </div>
                </div>
                    <div class="grid-item">
                        <div @onclick="OpenDialogCS" class="card">
                        <div class="control-section" align='center'>
                            <SfChart Title="CUSTOMER DK & LK" Width="@Width" Theme="@Theme" Palettes="@palettes2">
                                <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
                                <ChartEvents OnAxisLabelRender="axisLabel"></ChartEvents>
                                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="LabelIntersectAction.Rotate45">
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                </ChartPrimaryXAxis>
                                <ChartPrimaryYAxis Title="Prosess Case ID CUSTOMER">
                                    <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                                    <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                </ChartPrimaryYAxis>
                                <ChartSeriesCollection>
                                    <ChartSeries ColumnWidth="0.5" DataSource="@CSDKLK" XName="Area" YName="done" Width="2" Name="done" Type="ChartSeriesType.StackingColumn">
                                        <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                        <ChartMarker>
                                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                                        </ChartMarker>
                                    </ChartSeries>
                                    <ChartSeries ColumnWidth="0.5" DataSource="@CSDKLK" XName="Area" YName="proses" Width="2" Name="proses" Type="ChartSeriesType.StackingColumn">
                                        <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                        <ChartMarker>
                                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                                        </ChartMarker>
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                            </SfChart>
                        </div>
                        </div>
                    
                </div>
            </div>
<div class="grid-container-2">
    <div class="grid-item charts">
        <SfChart Title="PROGRES PICKING CASE ID" Palettes="@palettes">
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" >
            </ChartPrimaryXAxis>
            <ChartSeriesCollection>
                            <ChartSeries DataSource="@totalcaseid1" Name="GRW" XName="STATUS" Width="2" Opacity="1" YName="GRW" Type="ChartSeriesType.Column">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" />
                    </ChartMarker>
                </ChartSeries>
                            <ChartSeries DataSource="@totalcaseid1" Name="FLOW_THRU" XName="STATUS" Width="2" Opacity="1" YName="FLOW_THRU" Type="ChartSeriesType.Column">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" />
                    </ChartMarker>
                </ChartSeries>
                            <ChartSeries DataSource="@totalcaseid1" Name="CUSTOMER" XName="STATUS" Width="2" Opacity="1" YName="CUSTOMER" Type="ChartSeriesType.Column">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" />
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartLegendSettings Visible="true" /> 
        </SfChart>
    </div>
                        </div>
                    </div>
                </div>

</div>
            <div class="grid-container-3">
                <div class="grid-item">
    <div class="card1">
        <h3>PRODUCTIVITY CHECK & PACK</h3>
                        @if (pencapaian1 == null)
                    {
                            <p>No data found.</p>
                    }
                    else
                    {
                       <table class="table_aging">
                            <thead>
                                <tr>
                                   
                                    <th>NIK</th>
                                    <th>Nama</th>
                                    <th>Job Desk</th>
                                    <th>Target</th>
                                    <th>Pecapaian</th>
                                    <th>ACH</th>
                                </tr>
                            </thead>
                            <tbody>
                                    @foreach (var value3 in pencapaian1)
                                    {
                                        <tr>
    
                                            <td align="right">@value3.NIK</td>
                                            <td align="left">@value3.Nama</td>
                                            <td align="left">@value3.Job_Desk</td>
                                            <td align="right">@value3.Target</td>
                                            <td align="right">@value3.Pencapaian</td>
                                            <td align="right">@value3.ACH %</td>
                                        </tr>
                                    }
                            </tbody>
                        </table>
                    }
                    </div>
    </div>
                <div class="grid-item">
           <div @onclick="OpenDialogAgingstaged" class="card1">
      
                <div class="grid-item textt">
                    <h3>AGING OD DI STATUS STAGED by TIPE ORDER</h3>
                    @if (aging_Loc_Stageds == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                                <table class="table_aging">
                            <thead>
                                <tr>
                                    <th>TIPE ORDER</th>
                                    <th>TOTAL DO</th>
                                    <th>1 HARI</th>
                                    <th>2 HARI</th>
                                    <th>> 3 HARI</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var value1 in aging_Loc_Stageds)
                                {
                                    <tr>
                                        <td align="left">@value1.tipe_order</td>
                                        <td align="right">@value1.Total_DO</td>
                                        <td align="right">@value1.one_Day</td>
                                        <td align="right">@value1.two_Day</td>
                                        <td align="right">@value1.three_Day</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
          </div>
                </div>
</div>

    </MudTabPanel>
    <MudTabPanel Text="Loading">
            <h1>LOADING @DATE1</h1>
        <div class="grid-container5">
                <div class="grid-item">
             <div class="card1">
                        <h1><i class="fa-solid fa-truck"></i></h1><h2> Plan LC DK</h2>
             </div>
           </div>

                <div class="grid-item">
                    <div class="card1">
                        <h1><i class="fa-solid fa-truck-arrow-right"></i></h1><h2> Plan LC LK</h2>
                    </div>
                </div>

                <div class="grid-item">
                    <div class="card1">
                        <h1><i class="fa-solid fa-people-group"></i></h1><h2> Plan Mpp</h2>
                    </div>
                </div>


                <div class="grid-item">
                    <div class="card1">
                        <h1><i class="fa-solid fa-dolly"></i></h1><h2> Plan MHE</h2>
                    </div>
                </div>


                <div class="grid-item">
                    <div class="card1">
                        <h1><i class="fa-solid fa-mobile-retro"></i></h1><h2> Plan RF</h2>
                    </div>
                </div>

           </div>
            <div class="grid-container-3">
                <div class="grid-item">
                    <div class="card">
                        <h2>Status kedatangan armada LK</h2>
                        <MudTable Items="@statusarmadaLuarkotaList" Hover="true" SortLabel="Sort By">
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="new Func<statusarmadaLuarkota, object>(x=>x.tanggal_kirim)">tanggal_kirim</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel Enabled="@enabled" SortBy="new Func<statusarmadaLuarkota, object>(x=>x.Plan_LC)">Plan_LC</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel InitialDirection="MudBlazor.SortDirection.Ascending" SortBy="new Func<statusarmadaLuarkota, object>(x=>x.Belum_Datang)">Belum_Datang</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<statusarmadaLuarkota, object>(x=>x.Datang)">Datang</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<statusarmadaLuarkota, object>(x=>x.Antre)">Antre</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<statusarmadaLuarkota, object>(x=>x.Proses_Loading)">Proses_Loading</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<statusarmadaLuarkota, object>(x=>x.Selesai_loading)">Selesai_loading</MudTableSortLabel></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Tanggal Kirim">@context.tanggal_kirim</MudTd>
                                <MudTd DataLabel="Plan LC" Style="text-align:right">@context.Plan_LC</MudTd>
                                <MudTd DataLabel="Belum Datang" Style="text-align:right">@context.Belum_Datang</MudTd>
                                <MudTd DataLabel="Datang" Style="text-align:right">@context.Datang</MudTd>
                                <MudTd DataLabel="Antre" Style="text-align:right">@context.Antre</MudTd>
                                <MudTd DataLabel="Prosess Loading" Style="text-align:right">@context.Proses_Loading</MudTd>
                                <MudTd DataLabel="Selesai Loading" Style="text-align:right">@context.Selesai_loading</MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                            </PagerContent>
                        </MudTable>

                        <MudSwitch @bind-Checked="enabled" Color="Color.Info">Enable sorting on the Sign Column</MudSwitch>
                    </div>
                </div>
                <div class="grid-item">
                    <div class="card">
                        <h2>Status kedatangan armada DK</h2>
                        <MudTable Items="@statusarmadadalamkotalist" Hover="true" SortLabel="Sort By">
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="new Func<statusarmadadalamkota, object>(x=>x.tanggal_kirim)">tanggal_kirim</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel Enabled="@enabled" SortBy="new Func<statusarmadadalamkota, object>(x=>x.Plan_LC)">Plan_LC</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel InitialDirection="MudBlazor.SortDirection.Ascending" SortBy="new Func<statusarmadadalamkota, object>(x=>x.Belum_Datang)">Belum_Datang</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<statusarmadadalamkota, object>(x=>x.Datang)">Datang</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<statusarmadadalamkota, object>(x=>x.Antre)">Antre</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<statusarmadadalamkota, object>(x=>x.Proses_Loading)">Proses_Loading</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<statusarmadadalamkota, object>(x=>x.Selesai_loading)">Selesai_loading</MudTableSortLabel></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Tanggal Kirim" Class="clm-row-small">@context.tanggal_kirim</MudTd>
                                <MudTd DataLabel="Plan LC" Style="text-align:right" Class="clm-row-small" >@context.Plan_LC</MudTd>
                                <MudTd DataLabel="Belum Datang" Style="text-align:right" Class="clm-row-small">@context.Belum_Datang</MudTd>
                                <MudTd DataLabel="Datang" Style="text-align:right" Class="clm-row-small">@context.Datang</MudTd>
                                <MudTd DataLabel="Antre" Style="text-align:right" Class="clm-row-small">@context.Antre</MudTd>
                                <MudTd DataLabel="Prosess Loading" Style="text-align:right" Class="clm-row-small">@context.Proses_Loading</MudTd>
                                <MudTd DataLabel="Selesai Loading" Style="text-align:right" Class="clm-row-small">@context.Selesai_loading</MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                            </PagerContent>
                        </MudTable>

                        <MudSwitch @bind-Checked="enabled" Color="Color.Info">Enable sorting on the Sign Column</MudSwitch>
                    </div>
                </div>

            </div>
    </MudTabPanel>
    <MudTabPanel Text="Tab Three">
        <MudText>Content Three</MudText>
    </MudTabPanel>
</MudTabs>
</div>

@code {
    bool license_accepted = false;

    public static int hasilgrw = 0;
    public static int hasilFT = 0;
    public static int hasilCS = 0;
    public static int hasilgrwdalamkotaDONE ;
    public static int hasilgrwdalamkotaPROSESS ;

    public static string hasilgrwtext = "0";
    public static string hasilFTtext = "0";
    public static string hasilCStext = "0";
    public static string WHSEID = "";
    public static string AREA = "";
    public static string DATE1 = "";
    public static string DATE2 = "";
    public static string TYPE = "";
    public static string Url = "";
    public static string grwdk ;
    public static string Url_Aging = "";
    public Statistics[]? statistics;
    private Top10user[]? userapps;
    public Aging_Loc_staged[]? aging_Loc_Stageds ;
    public plangrw[]? plangrws;
    public planft[]? planfts;
    public plancs[]? plancss;
    public totalcaseid[]? totalcaseid1 { get; set; }
    public pencapaian[]? pencapaian1 { get; set; }
    public List<string>? HasilTotal { get; set; }
    public prosesGRWarea[]? GRWDKLK { get; set; }
    public prosesFTarea[]? FTDKLK { get; set; }
    public prosesCSarea[]? CSDKLK { get; set; }
    public statusarmadaLuarkota[]? StatusArmada1 { get; set; }
    private bool enabled = true;
    private IEnumerable<statusarmadaLuarkota> statusarmadaLuarkota = new List<statusarmadaLuarkota>();
    private List<statusarmadaLuarkota> statusarmadaLuarkotaList = new List<statusarmadaLuarkota>();

    private IEnumerable<statusarmadadalamkota> statusarmadadalamkota = new List<statusarmadadalamkota>();
    private List<statusarmadadalamkota> statusarmadadalamkotalist = new List<statusarmadadalamkota>();

    protected override async Task OnInitializedAsync()
    {

        WHSEID = LoginModuleAtribut.Facility;
        DATE1 = DateTime.Now.ToString("yyyy-MM-dd");
        DATE2 = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd");


        var Response_pencapaian = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/OUTBOUND/CHECK&PACK/6/wmwhse4/DALAM KOTA/{DATE1}/{DATE2}/GRW/");
        var valuepencpaian = await Response_pencapaian.Content.ReadAsStringAsync();
        pencapaian1 = JsonConvert.DeserializeObject<pencapaian[]>(valuepencpaian);


        var Response_Aging = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/OUTBOUND/CHECK&PACK/3/wmwhse4/DALAM KOTA/{DATE1}/{DATE2}/GRW/");
        var value1 = await Response_Aging.Content.ReadAsStringAsync();
        aging_Loc_Stageds = JsonConvert.DeserializeObject<Aging_Loc_staged[]>(value1);

        var ResponseGRW = await Http.GetAsync(UrlModule.BaseModuleUrl+$"API/HCI/OUTBOUND/CHECK&PACK/1/wmwhse4/DALAM KOTA/{DATE1}/{DATE2}/GRW/");
        var valueGRW2 = await ResponseGRW.Content.ReadAsStringAsync();
        plangrws = JsonConvert.DeserializeObject<plangrw[]>(valueGRW2);
        @foreach (var VALLGRW in plangrws)
        {
            
            hasilgrw = Convert.ToInt32(@VALLGRW.ACH);
        }

        var ResponseFT = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/OUTBOUND/CHECK&PACK/2/wmwhse4/DALAM KOTA/{DATE1}/{DATE2}/GRW/");
        var valueFT = await ResponseFT.Content.ReadAsStringAsync();
        planfts = JsonConvert.DeserializeObject<planft[]>(valueFT);
        @foreach (var VALLFT in planfts)
        {

            hasilFT = Convert.ToInt32(@VALLFT.ACH);
            hasilFTtext = @VALLFT.ACH;
        }

        var ResponseCS = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/OUTBOUND/CHECK&PACK/4/wmwhse4/DALAM KOTA/{DATE1}/{DATE2}/GRW/");
        var valueCS = await ResponseCS.Content.ReadAsStringAsync();
        plancss = JsonConvert.DeserializeObject<plancs[]>(valueCS);
        @foreach (var VALLcs in plancss)
        {

            hasilCS = Convert.ToInt32(@VALLcs.ACH);
            hasilCStext = @VALLcs.ACH;
        }



        var ResponseTOTALCASEID = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/OUTBOUND/CHECK&PACK/5/wmwhse4/DALAM KOTA/{DATE1}/{DATE2}/GRW/");
        var valuetotalcaseid = await ResponseTOTALCASEID.Content.ReadAsStringAsync();
        totalcaseid1 = JsonConvert.DeserializeObject<totalcaseid[]>(valuetotalcaseid);

        var GRWdalamkota = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/OUTBOUND/CHECK&PACK/7/wmwhse4/DALAM KOTA/{DATE1}/{DATE2}/GRW/");
        var valuegrwdalamkota = await GRWdalamkota.Content.ReadAsStringAsync();
        GRWDKLK = JsonConvert.DeserializeObject<prosesGRWarea[]>(valuegrwdalamkota);

        var FTdalamkota = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/OUTBOUND/CHECK&PACK/8/wmwhse4/DALAM KOTA/{DATE1}/{DATE2}/GRW/");
        var valueFTdalamkota = await FTdalamkota.Content.ReadAsStringAsync();
        FTDKLK = JsonConvert.DeserializeObject<prosesFTarea[]>(valueFTdalamkota);

        var CSdalamkota = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/OUTBOUND/CHECK&PACK/9/wmwhse4/DALAM KOTA/{DATE1}/{DATE2}/GRW/");
        var valueCSdalamkota = await CSdalamkota.Content.ReadAsStringAsync();
        CSDKLK = JsonConvert.DeserializeObject<prosesCSarea[]>(valueCSdalamkota);

        var ARMADALK = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/OUTBOUND/Loading/1/wmwhse4/Luar%20Kota/{DATE1}/{DATE2}/");
        var valueARMADALK = await ARMADALK.Content.ReadAsStringAsync();
        statusarmadaLuarkotaList = JsonConvert.DeserializeObject<List<statusarmadaLuarkota>>(valueARMADALK);

        var ARMADADK = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/OUTBOUND/Loading/2/wmwhse4/Dalam%20Kota/{DATE1}/{DATE2}/");
        var valueARMADADK = await ARMADADK.Content.ReadAsStringAsync();
        statusarmadadalamkotalist = JsonConvert.DeserializeObject<List<statusarmadadalamkota>>(valueARMADADK);



    }



    public class Statistics
    {
        public string? STATE { get; set; }
        public double? PERSEN { get; set; }
        public string? Text { get; set; }
    }

    public class ChartData
    {
        public string? status { get; set; }
        public double GRW { get; set; }
        public double fLOW_THRU { get; set; }
        public double CUSTOMER { get; set; }
    }


    public String[] palettes = new String[] { "  #4CAF50  ", "  #66BB6A ", "  #81C784 " };

    public String[] palettes2 = new String[] { "#4caF50", "#F44336" };

    public class BusinessObject
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public int Duration { get; set; }
        public int Progress { get; set; }
        public string Priority { get; set; }
        public int? ParentId { get; set; }
    }


    public List<Order1> Orders1 { get; set; }

    public class Order1
    {
        public string? NIK { get; set; }
        public string? name { get; set; }
        public string? target { get; set; }
        public string? pecapaian { get; set; }
        public string? ACH { get; set; }

    }


    private Theme Theme { get; set; }
    public string Width { get; set; } = "90%";
    public List<StackedColumnChartData> ChartPointsGRWDALAMKOTA { get; set; } = new List<StackedColumnChartData>
    {

        new StackedColumnChartData { Area = "DK", Done = 100, Prosess = 76 },
        new StackedColumnChartData { Area = "LK", Done = 100, Prosess = 76 }
    };

    void axisLabel(AxisLabelRenderEventArgs args)
    {
        if (args.Value > 999999 || args.Value < -999999)
        {
            args.Text = args.Value.ToString("0,,.##M", CultureInfo.InvariantCulture);
        }
    }
    public class StackedColumnChartData
    {
        public string Area { get; set; }
        public double Done { get; set; }
        public double Prosess { get; set; }
    }

    private bool IsVisible { get; set; } = true;

    private async Task OpenDialoggrw()
    {
    
        var options = new MudBlazor.DialogOptions
        {
                Position = DialogPosition.Center,
                    MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true
            };

        var result = await DialogService.Show<Detailprosesgrwdklkdialog>("Detail Check & Pack GRW DK & LK", options).Result;
    
        if (!result.Cancelled)
        {

        }
    }

    private async Task OpenDialogFT()
    {

        var options = new MudBlazor.DialogOptions
            {
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true
            };

        var result = await DialogService.Show<DetailprosessFTdklkdialog>("Detail Check & Pack FLOW THRU", options).Result;

        if (!result.Cancelled)
        {

        }
    }

    private async Task OpenDialogCS()
    {

        var options = new MudBlazor.DialogOptions
            {
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true
            };

        var result = await DialogService.Show<DetailprosessCSdialog>("Detail Check & Pack Customer", options).Result;

        if (!result.Cancelled)
        {

        }
    }

    private async Task OpenDialogAgingstaged()
    {

        var options = new MudBlazor.DialogOptions
            {
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true
            };

        var result = await DialogService.Show<DetailAgingStagedDialog>("Detail Aging Status Staged", options).Result;

        if (!result.Cancelled)
        {

        }
    }

    


}