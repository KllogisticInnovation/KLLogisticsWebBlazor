@layout MainLayout
@page "/HCI/D_STORING"
@inject HttpClient Http
@inject IDialogService DialogService
@using KLLogisticsWebBlazor.Pages.DASHBOARD.HCI.STORING;
@using MudBlazor;
@using KLLogisticsWebBlazor.Models;
@using KLLogisticsWebBlazor.Config;
@using Newtonsoft.Json;
@using Syncfusion.Blazor.CircularGauge;
@using Syncfusion.Blazor.Data;
@inject NavigationManager NavigationManager
@using Syncfusion.Blazor.ProgressBar
@inject NavigationManager Navigation
@using Syncfusion.Blazor.Navigations
@using Microsoft.AspNetCore.Components	

@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Layouts
@using System.Timers

@*<MudTabs Elevation="2" Rounded="true" Centered="true" ApplyEffectsToContainer="true" PanelClass="pa-4">*@
   
<MudTabs Elevation="2" ApplyEffectsToContainer="true" PanelClass="pa-4" Rounded="true" Centered="false">
	<MudTabPanel Text="Picking">

		<!-- Picking - Planning CASE ID-->

		<div class="panelbody">

			<MudPaper Width="400px" Height="150px" style="margin:15px;">

				<div class="label-container">
					<span class="icon">
						<i class="fas fa-barcode"></i>
					</span>
					<div class="text-container">
                       <span class="text1">5500</span>
                       <span class="text">Case ID</span>
                    </div>		
				</div>
				<div class="card-header">
					<h7 class="card-title">Plan Picking</h7>
				</div>

			</MudPaper>


		<MudPaper Width="400px" Height="150px" style="margin:15px;">

		<div class="label-container">
			<span class="iconp">
				<i class="fas fa-users"></i>
			</span>
			<div class="text-container">
			   <span class="text1">48</span>
			   <span class="text">MPP</span>
		    </div>
		</div>
			<div class="card-header">
			    <h7 class="card-title">Plan MPP</h7>
			</div>

		</MudPaper>

		<MudPaper Width="400px" Height="150px" style="margin:15px;">

			<div class="label-container">
				<span class="icone">
					<i class="fas fa-dolly"></i>
				</span>
					<div class="text-container">
				<span class="text1">24</span>
				<span class="text">MHE</span>
					</div>
			</div>
				<div class="card-header">
					<h7 class="card-title">Plan MHE</h7>
				</div>

		</MudPaper>

		<MudPaper Width="400px" Height="150px" style="margin:15px;">

			<div class="label-container">
				<span class="icona">
					<i class="fas fa-mobile"></i>
				</span>
					<div class="text-container">
					<span class="text1">24</span>
				<span class="text">PDA</span>
					</div>
			</div>
				<div class="card-header">
					<h7 class="card-title">Plan PDA</h7>
				</div>

		</MudPaper>

		</div>
		
		<!-- Picking - WORKING PROGRES 1 -->

		<div class="panelbody">
			<MudPaper Width="830px" Height="500px" style="margin:15px;">
				

				<SfChart Title="Working Progres CaseID perArea" Width="@Width" Theme="@Theme" EnableSideBySidePlacement="false">
					<ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
					<ChartTooltipSettings Enable="true" Header="<b>${point.x}</b>" Format="Rate : <b>${point.tooltip}</b>"></ChartTooltipSettings>
					<ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="@AxislabelRotation" LabelRotation="@Rotation">
						<ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
						<ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
					</ChartPrimaryXAxis>
					<ChartPrimaryYAxis LabelFormat="{value}%" Minimum="0" Maximum="100" Interval="25">
						<ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
						<ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
						<ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
					</ChartPrimaryYAxis>
					<ChartSeriesCollection>
						<ChartSeries EnableTooltip="false" DataSource="@ChartPoints" XName="Area" YName="Rate" Type="ChartSeriesType.Column" Opacity="0.5">
							<ChartMarker>
								<ChartDataLabel EnableRotation="@Rotate" Angle="@AngleRotate" Visible="false" Position="Syncfusion.Blazor.Charts.LabelPosition.Top">
									<ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
								</ChartDataLabel>
							</ChartMarker>
							<ChartCornerRadius BottomLeft="@BottomLeft" BottomRight="@BottomRight" TopLeft="@TopLeft" TopRight="@TopRight"></ChartCornerRadius>
						</ChartSeries>
						<ChartSeries TooltipMappingName="Text" DataSource="@ChartPoints" XName="Area" YName="Literacy_Rate" Type="ChartSeriesType.Column">
							<ChartMarker>
								<ChartDataLabel EnableRotation="@Rotate" Angle="@AngleRotate" Alignment="Syncfusion.Blazor.Charts.Alignment.Near" Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Top" Name="Text">
									<ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
								</ChartDataLabel>
							</ChartMarker>
							<ChartCornerRadius BottomLeft="@BottomLeft" BottomRight="@BottomRight" TopLeft="@TopLeft" TopRight="@TopRight"></ChartCornerRadius>
						</ChartSeries>
					</ChartSeriesCollection>
					<ChartLegendSettings Visible="false"></ChartLegendSettings>
					<ChartEvents OnPointRender="PointRender"></ChartEvents>
				</SfChart>

			

		</MudPaper>

			<!-- Picking - WORKING PROGRES 2 -->
			<MudPaper Width="830px" Height="500px" style="margin:15px;">
				
				<div class="control-section">
					<SfAccumulationChart EnableBorderOnMouseMove="true" Title="PLAN PER BATCH" EnableAnimation="true">
						<AccumulationChartTooltipSettings Header="" Format="<b>${point.x}</b><br><b>${point.y}</b>" Enable="false"></AccumulationChartTooltipSettings>
						<AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
						<AccumulationChartSeriesCollection>
							<AccumulationChartSeries DataSource="@PieChartPoints" XName="Batch" YName="Users" Radius="80%" Name="Batch" StartAngle="@StartAngle"
				                                     InnerRadius="0%" ExplodeIndex="0" Explode="true" ExplodeOffset="10%" PointColorMapping="Fill">
								<AccumulationDataLabelSettings Visible="true" Name="Users" Position="AccumulationLabelPosition.Inside">
									<AccumulationChartDataLabelFont FontWeight="600"></AccumulationChartDataLabelFont>
									<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
								</AccumulationDataLabelSettings>
							</AccumulationChartSeries>
						</AccumulationChartSeriesCollection>
					</SfAccumulationChart>
				</div>
					
		
		</MudPaper>
		</div>

		<!-- Picking - 3 -->
		<div class="panelbody">
		<MudPaper Width="830px" style="margin:15px;">
				<div class="card-header">
					<h7 class="card-title">Progres OD</h7>
				</div>
		<MudDataGrid Items="@_items3" Filterable="true">
			<Columns>
				<PropertyColumn Property="x => x.WT" />
				<PropertyColumn Property="x => x.TOTALOD" />
				<PropertyColumn Property="x => x.ONPROGRES" class="text" />
				<PropertyColumn Property="x => x.STAGED" class="text" />
			</Columns>
		</MudDataGrid>
		</MudPaper>

			<MudPaper Width="830px" style="margin:15px;">
				<div class="card-header">
					<h7 class="card-title">Produktivitas Picking</h7>
				</div>
				<MudDataGrid Items="@_items" Filterable="true">
					<Columns>
						<PropertyColumn Property="x => x.NIK" />
						<PropertyColumn Property="x => x.Nama" />
						<PropertyColumn Property="x => x.Target" class="text" />
						<PropertyColumn Property="x => x.Actual" class="text" />
					</Columns>
				</MudDataGrid>
			</MudPaper>

		</div>
    </MudTabPanel>

	<!-- Putaway - 1 -->
    <MudTabPanel Text="Putaway">
		<div class="panelbody">
			<!-- Picking - Planning CASE ID-->

		<div class="panelbody">

			<MudPaper Width="400px" Height="150px" style="margin:15px;">

				<div class="label-container">
					<span class="icon">
						<i class="fas fa-barcode"></i>
					</span>
					<div class="text-container">
                       <span class="text1">130</span>
                       <span class="text">LPN</span>
                    </div>		
				</div>
				<div class="card-header">
					<h7 class="card-title">Plan Putaway</h7>
				</div>

			</MudPaper>


		<MudPaper Width="400px" Height="150px" style="margin:15px;">

		<div class="label-container">
			<span class="iconp">
				<i class="fas fa-users"></i>
			</span>
			<div class="text-container">
			   <span class="text1">2</span>
			   <span class="text">MPP</span>
		    </div>
		</div>
			<div class="card-header">
			    <h7 class="card-title">Plan MPP</h7>
			</div>

		</MudPaper>

		<MudPaper Width="400px" Height="150px" style="margin:15px;">

			<div class="label-container">
				<span class="icone">
					<i class="fas fa-dolly"></i>
				</span>
					<div class="text-container">
				<span class="text1">2</span>
				<span class="text">MHE</span>
					</div>
			</div>
				<div class="card-header">
					<h7 class="card-title">Plan MHE</h7>
				</div>

		</MudPaper>

		<MudPaper Width="400px" Height="150px" style="margin:15px;">

			<div class="label-container">
				<span class="icona">
					<i class="fas fa-mobile"></i>
				</span>
					<div class="text-container">
					<span class="text1">1</span>
				<span class="text">PDA</span>
					</div>
			</div>
				<div class="card-header">
					<h7 class="card-title">Plan PDA</h7>
				</div>

		</MudPaper>

		</div>
		</div>
		<!-- Putaway - WORKING PROGRES 2 -->
		<div class="panelbody">
		<MudPaper Width="830px" Height="500px" style="margin:15px;">

			<div class="control-section">
				<SfAccumulationChart EnableBorderOnMouseMove="true" Title="Aging Putaway" EnableAnimation="true">
					<AccumulationChartTooltipSettings Header="" Format="<b>${point.x}</b><br><b>${point.y}</b>" Enable="false"></AccumulationChartTooltipSettings>
					<AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
					<AccumulationChartSeriesCollection>
						<AccumulationChartSeries DataSource="@PieChartPoints1" XName="Batch1" YName="Users1" Radius="80%" Name="Batch1" StartAngle="@StartAngle"
												 InnerRadius="0%" ExplodeIndex="0" Explode="true" ExplodeOffset="10%" PointColorMapping="Fill1">
							<AccumulationDataLabelSettings Visible="true" Name="Users1" Position="AccumulationLabelPosition.Inside">
								<AccumulationChartDataLabelFont FontWeight="600"></AccumulationChartDataLabelFont>
								<AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
							</AccumulationDataLabelSettings>
						</AccumulationChartSeries>
					</AccumulationChartSeriesCollection>
				</SfAccumulationChart>
			</div>


		</MudPaper>
		<MudPaper Width="830px" Height="500px" style="margin:15px;">
		<SfChart Title="Progres Putaway Per Area">
			<ChartPrimaryXAxis Title="Day" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
			<ChartPrimaryYAxis Title="Progres Putaway Per Area"></ChartPrimaryYAxis>
			<ChartSeriesCollection>
				<ChartSeries DataSource="@Sales" XName="Month" YName="SalesValue" Type="ChartSeriesType.Column">
					<ChartMarker>
						<ChartDataLabel Visible="true"></ChartDataLabel>
					</ChartMarker>
				</ChartSeries>
			</ChartSeriesCollection>
		</SfChart>
		</MudPaper>
		</div>
			<MudPaper Width="830px" style="margin:15px;">
				<div class="card-header">
					<h7 class="card-title">Produktivitas Putaway</h7>
				</div>
				<MudDataGrid Items="@_items" Filterable="true">
					<Columns>
						<PropertyColumn Property="x => x.NIK" />
						<PropertyColumn Property="x => x.Nama" />
						<PropertyColumn Property="x => x.Target" style="text-align: right;" />
						<PropertyColumn Property="x => x.Actual" style="text-align: right;" />
					</Columns>
				</MudDataGrid>
			</MudPaper>

		

    </MudTabPanel>
    <MudTabPanel Text="Tab Three">
		<SfProgressBar Type="ProgressType.Linear" Value="90" Height="60" Width="90%" TrackColor="#FFFFFF"
					   ShowProgressValue="true" ProgressColor="#2BB20E" TrackThickness="24" CornerRadius="CornerType.Round"
					   ProgressThickness="24" Minimum="0" Maximum="100">
			<ProgressBarAnimation Enable="true" Duration="2000" Delay="0"></ProgressBarAnimation>
		</SfProgressBar>
    </MudTabPanel>
    <MudTabPanel Text="Tab Disabled" Disabled="true">
        <MudText>Content Disabled</MudText>
    </MudTabPanel>
</MudTabs> 




@code {
    SfDashboardLayout? dashboardObject;
    private Theme Theme { get; set; }
    private double[] Spacing = new double[] { 15, 15 };
    private double Ratio = 160 / 100;


    public string Width { get; set; } = "90%";
    public double TopLeft { get; set; } = 35;
    public double TopRight { get; set; } = 35;
    public double BottomLeft { get; set; } = 35;
    public double BottomRight { get; set; } = 35;
    public bool Rotate { get; set; } = false;
    public double AngleRotate { get; set; } = 0;
	public Syncfusion.Blazor.Charts.LabelIntersectAction AxislabelRotation { get; set; } = Syncfusion.Blazor.Charts.LabelIntersectAction.Rotate45;
    public double Rotation { get; set; } = 0;



	<!-- WORKING PROGRES  - Picking  1 -->
	
	public List<RoundedColumnChartData> ChartPoints { get; set; } = new List<RoundedColumnChartData>
	{
	   new RoundedColumnChartData { Area = "Area1", Rate = 100, Literacy_Rate = 48.1, Text = "48.1%" },
	   new RoundedColumnChartData { Area = "Area2", Rate = 100, Literacy_Rate = 26.8, Text = "26.8%" },
	   new RoundedColumnChartData { Area = "Area3", Rate = 100, Literacy_Rate = 64.7, Text = "64.7%" },
	   new RoundedColumnChartData { Area = "Area4", Rate = 100, Literacy_Rate = 55.5, Text = "55.5%" },
	   new RoundedColumnChartData { Area = "Area5", Rate = 100, Literacy_Rate = 88.5, Text = "88.5%" },
	  
	};
	
	public void PointRender(PointRenderEventArgs args)
	{
		this.SetTheme(args);
	}
	private void SetTheme(PointRenderEventArgs args)
	{
		if (NavigationManager.Uri.IndexOf("material") > -1)
		{
			if (NavigationManager.Uri.IndexOf("dark") > -1)
			{
				if (args.Series.YName == "Rate")
					args.Fill = "#F44336";
			}
			else
			{
				if (args.Series.YName == "Rate")
					args.Fill = "Red";
			}
		}
		else if (NavigationManager.Uri.IndexOf("fabric") > -1)
		{
			if (NavigationManager.Uri.IndexOf("dark") > -1)
			{
				if (args.Series.YName == "Rate")
					args.Fill = "#F44336";
			}
			else
			{
				if (args.Series.YName == "Rate")
					args.Fill = "Red";
			}
		}
		else if (NavigationManager.Uri.IndexOf("bootstrap5") > -1)
		{
			if (NavigationManager.Uri.IndexOf("dark") > -1)
			{
				if (args.Series.YName == "Rate")
					args.Fill = "#F44336";
			}
			else
			{
				if (args.Series.YName == "Rate")
					args.Fill = "Red";
			}
		}
		else if (NavigationManager.Uri.IndexOf("fluent") > -1)
		{
			if (NavigationManager.Uri.IndexOf("dark") > -1)
			{
				if (args.Series.YName == "Rate")
					args.Fill = "#F44336";
			}
			else
			{
				if (args.Series.YName == "Rate")
					args.Fill = "Red";
			}
		}
		else if (NavigationManager.Uri.IndexOf("bootstrap4") > -1)
		{
			if (args.Series.YName == "Rate")
				args.Fill = "Red";
		}
		else if (NavigationManager.Uri.IndexOf("bootstrap") > -1)
		{
			if (NavigationManager.Uri.IndexOf("dark") > -1)
			{
				if (args.Series.YName == "Rate")
					args.Fill = "#F44336";
			}
			else
			{
				if (args.Series.YName == "Rate")
					args.Fill = "Red";
			}
		}
		else if (NavigationManager.Uri.IndexOf("tailwind") > -1)
		{
			if (NavigationManager.Uri.IndexOf("dark") > -1)
			{
				if (args.Series.YName == "Rate")
					args.Fill = "#F44336";
			}
			else
			{
				if (args.Series.YName == "Rate")
					args.Fill = "Red";
			}
		}
		else if (NavigationManager.Uri.IndexOf("highcontrast") > -1)
		{
			if (args.Series.YName == "Rate")
				args.Fill = "#F44336";
		}
		else
		{
			if (args.Series.YName == "Rate")
				args.Fill = "Red";
		}

		if (args.Series.YName == "Literacy_Rate")
		{
			// Tentukan warna yang ingin digunakan
			args.Fill = "#4CAF50";
		}

	}
	public class RoundedColumnChartData
	{
		public string Area { get; set; }
		public double Rate { get; set; }
		public double Literacy_Rate { get; set; }
		public string Text { get; set; }
	}

	<!-- WORKING PROGRES  - Picking  2 -->
	
		
    public int ExplodeIndex { get; set; } = 1;
    public string ExplodeRadius = "10%";
    public string Radius { get; set; } = "60%";
    public int StartAngle = 30;


	public List<PieData> PieChartPoints { get; set; } = new List<PieData>
{
	new PieData { Batch = "WT 1", Users = 1800, DataLabelMappingName = "WT 1: 33%", Fill="#66BB6A"},
	new PieData { Batch = "WT 2", Users = 1800, DataLabelMappingName = "WT 2: 33%", Fill="#80D8FF"},
	new PieData { Batch = "WT 3", Users = 1900, DataLabelMappingName = "WT 3: 35%", Fill="#BDBDBD"},
};


    public class PieData
    {
        public string Batch { get; set; }
        public double Users { get; set; }
        public string DataLabelMappingName { get; set; }
		public string Fill { get; set; }
		public string Text { get; set; }
	}


	<!-- Productifitas - Picking -->
	public record Model(string NIK, string Nama, double? Target, double? Actual);

	private IEnumerable<Model> _items = new List<Model>()
	{
		new Model("110463","Rudi", 250, 230),
		new Model("148191", "Alfi", 250,300),
		new Model("126228", "Ikhsan", 250, 257),
		new Model("999999", "Dilla", 250, 278)
	};

	public record Model1(string WT, double? TOTALOD, double? ONPROGRES, double? STAGED);

	private IEnumerable<Model1> _items3 = new List<Model1>()
	{
		new Model1("WT 1",480, 250, 230),
		new Model1("WT 2", 550, 250,300),
		new Model1("WT 3", 507, 250, 257)
	};


	<!-- WORKING PROGRES  - Putaway  2 -->
	


	public List<PieData1> PieChartPoints1 { get; set; } = new List<PieData1>
{
	new PieData1 { Batch1 = "HO", Users1 = 300, DataLabelMappingName1 = "WT 1: 29%", Fill1="#66BB6A"},
	new PieData1 { Batch1 = "H1", Users1 = 400, DataLabelMappingName1 = "WT 2: 39%", Fill1="#80D8FF"},
	new PieData1 { Batch1 = "H2", Users1 = 350, DataLabelMappingName1 = "WT 3: 33%", Fill1="#FF1744"},
	new PieData1 { Batch1 = "H>3", Users1 = 350, DataLabelMappingName1 = "WT 3: 33%", Fill1="#D50000"},
};


	public class PieData1
	{
		public string Batch1 { get; set; }
		public double Users1 { get; set; }
		public string DataLabelMappingName1 { get; set; }
		public string Fill1 { get; set; }
		public string Text1 { get; set; }
	}
	<!-- Productifitas - Putaway -->
	private IEnumerable<Model> _items1 = new List<Model>()
	{
		new Model("110463","Rudi", 130, 230),
		new Model("148191", "Alfi", 130,300),
		new Model("126228", "Ikhsan", 130, 257),
		new Model("999999", "Dilla", 130, 278)
	};


	public class SalesInfo
	{
		public string Month { get; set; }
		public double SalesValue { get; set; }
	}

	public List<SalesInfo> Sales = new List<SalesInfo>
	{
		new SalesInfo { Month = "Area 1", SalesValue = 35 },
		new SalesInfo { Month = "Area 2", SalesValue = 28 },
		new SalesInfo { Month = "Area 3", SalesValue = 34 },
		new SalesInfo { Month = "Area 4", SalesValue = 32 },
		new SalesInfo { Month = "Area 5", SalesValue = 40 }
	};
}