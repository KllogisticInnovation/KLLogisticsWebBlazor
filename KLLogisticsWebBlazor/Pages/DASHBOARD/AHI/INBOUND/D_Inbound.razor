@layout MainLayout
@page "/AHI/D_INBOUND"
@inject HttpClient Http
@inject IDialogService DialogService

@using KLLogisticsWebBlazor.Pages.DASHBOARD.AHI.INBOUND;
@using MudBlazor;
@using KLLogisticsWebBlazor.Models;
@using KLLogisticsWebBlazor.Config;
@using Newtonsoft.Json;
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.Data;

<PageTitle>DASHBOARD INBOUND AHI</PageTitle>
<div class="grid-container">
    <div class="grid-item">
        <div class="card">  
            <div @onclick="OpenDialog" class="container">
                <div class="grid-Unload-Continer-rows">
                    <div class="Iconsbox ">
                        <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Style="font-size: 6rem;" />
                    </div>
                    <div class="grid-item import">
                        <div class="card">
                            <div class="container">
                                <h3>@Import <b>IMPORT (Armada)</b></h3>
                            </div>
                        </div>
                    </div>
                    <div class="grid-item local">
                        <div class="card">
                            <div class="container">
                                <h3>@Local <b>LOCAL (Armada)</b></h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="grid-item">
        <div class="card">
            <div class="container">
                <MudIcon Icon="@Icons.Material.Filled.AltRoute" Style="font-size: 6rem;" /> <br />
                <h3>@Flowthru <b>FLOWTHRU (Caseid)</b></h3>
            </div>
        </div>
    </div>
    <div class="grid-item">
        <div class="card">
            <div class="container">
                <MudIcon Icon="@Icons.Material.Filled.DataExploration" Style="font-size: 6rem;" /> <br />
                <h3>@Putaway <b>PUTAWAY (Lpn)</b></h3>
            </div>
        </div>
    </div>
</div>

<div class="grid-container-1">
    <div class="grid-item">
        <div class="card">
            <div class="container">

@*            <SfSparkline DataSource="@inbounds" TValue="Inbound_Convert" Type="Syncfusion.Blazor.Charts.SparklineType.Pie" ValueType="SparklineValueType.Category" XName="Status" YName="Total">
                <SparklineAxisSettings>
                        <SparklineAxisLineSettings Visible="true"></SparklineAxisLineSettings>
                    </SparklineAxisSettings>
                <SparklineDataLabelSettings Visible="new List<Syncfusion.Blazor.Charts.VisibleType> { Syncfusion.Blazor.Charts.VisibleType.All }" Format=" ${Status} - ${Total}" EdgeLabelMode="EdgeLabelMode.Shift"></SparklineDataLabelSettings>
                <SparklineMarkerSettings Visible="new List<Syncfusion.Blazor.Charts.VisibleType> { Syncfusion.Blazor.Charts.VisibleType.All }"></SparklineMarkerSettings>
                    <SparklineTooltipSettings TValue="Inbound_Convert" Visible="true"></SparklineTooltipSettings>
                </SfSparkline>
*@

            <SfAccumulationChart Title="Container Status" EnableSmartLabels="true">
                <AccumulationChartSeriesCollection>
                    <AccumulationChartSeries DataSource="@inbounds" XName="Status" YName="Total"
                                             Name="Status" PointColorMapping="Fill">
                        <AccumulationDataLabelSettings Visible="true" Name="Text" Position="AccumulationLabelPosition.Inside"></AccumulationDataLabelSettings>

                    </AccumulationChartSeries>
                </AccumulationChartSeriesCollection>
                <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
            </SfAccumulationChart>
            
    </div>
    </div>
        </div>
        <div class="grid-item">
        <div class="card">
            <div class="container">
                <SfChart>
                    <SfDataManager Url=@Url Adaptor="Adaptors.WebApiAdaptor"></SfDataManager>
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                    <ChartSeriesCollection>
                        <ChartSeries XName="Company_Name" YName="Total" Type="Syncfusion.Blazor.Charts.ChartSeriesType.Column"></ChartSeries>
                    </ChartSeriesCollection>
                    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                    <ChartCrosshairSettings Enable="true"></ChartCrosshairSettings>
                    <ChartZoomSettings EnableSelectionZooming="true"></ChartZoomSettings>
                </SfChart>
            </div>
        </div>
    </div>
</div>

@code {
    //private List<ContSum>? Getdata = new List<ContSum>();
    bool license_accepted = false;
    public static string Url = "";
    public static string Import = "";
    public static string Local = "";
    public static string Flowthru = "";
    public static string Putaway = "";
    public Inbound_Convert[]? inbounds;
    //public IEnumerable<Inbound_Convert>? inbounds = Enumerable.Empty<Inbound_Convert>();

    protected override async Task OnInitializedAsync()
    {

        Url = UrlModule.BaseModuleUrl + "api/userapps/GetAllEmp/";

        var response = await Http.GetAsync(UrlModule.BaseModuleUrl + "API/HCI/INBOUND/StatusCont");
        var values = await response.Content.ReadAsStringAsync();
        inbounds = JsonConvert.DeserializeObject<Inbound_Convert[]>(values);


        if (Import == "")
        {
            await GetImport();
        }
        if (Local == "")
        {
            await GetLocal();
        }
        if (Flowthru == "")
        {
            await GetFlowthru();
        }
        if (Putaway == "")
        {
            await GetPutaway();
        }

        //userapps = await Http.GetFromJsonAsync<Userapps[]>(@"http://localhost:1899/api/userapps/GetTop10User/");
        //Getdata = await Http.GetFromJsonAsync<List<ContSum>>(@"http://localhost:1899/api/HCI/Inbound/GetSumCont/");

    }
    public async Task GetStatus_Chart()
    {

        inbounds = await Http.GetFromJsonAsync<Inbound_Convert[]>(UrlModule.BaseModuleUrl + "API/HCI/INBOUND/StatusCont");

    }
    public async Task GetImport()
    {
        var Response = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/INBOUND/GetImport");
        var value = Response.Content.ReadAsStringAsync();
        var result = value.Result.ToString();
        Import = result;
    }

    public async Task GetLocal()
    {
        var Response = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/INBOUND/GetLocal");
        var value = Response.Content.ReadAsStringAsync();
        var result = value.Result.ToString();
        Local = result;
    }

    public async Task GetFlowthru()
    {
        var Response = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/INBOUND/GetFlowthru");
        var value = Response.Content.ReadAsStringAsync();
        var result = value.Result.ToString();
        Flowthru = result;
    }

    public async Task GetPutaway()
    {
        var Response = await Http.GetAsync(UrlModule.BaseModuleUrl + $"API/HCI/INBOUND/GetPutaway");
        var value = Response.Content.ReadAsStringAsync();
        var result = value.Result.ToString();
        Putaway = result;
    }

    public async Task OpenDialog()
    {
        var result = await DialogService.Show<Inb_Dialog>("MudBlazor License").Result;

        if (!result.Canceled)
        {
            license_accepted = (bool)(result.Data ?? false);
        }
    }
}