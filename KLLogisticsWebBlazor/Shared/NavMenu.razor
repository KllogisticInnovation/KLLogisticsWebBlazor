@using Syncfusion.Blazor.Navigations
@using KLLogisticsWebBlazor.Config
@inject IJSRuntime jsRuntime
@inject IDialogService DialogService
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/Home">KLLogisticsWebBlazor</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>


@*Width="250px" Class="py-3 mb-4"
*@
<MudPaper class="nav-scrollable" Elevation="1">
    <MudNavMenu class="flex-column">
        <div class="nav-item px-3">
         <MudNavLink Href="/QR&Page" Icon="@Icons.Material.Filled.QrCodeScanner">QR</MudNavLink>
         <MudNavLink Href="/Home" Icon="@Icons.Material.Filled.Home">HOME</MudNavLink>
            <MudNavGroup Title="DASHBOARD" Icon="@Icons.Material.Filled.Dashboard" @bind-Expanded=_isExpanded>
                <MudNavLink Href="@Inbound_Url" Icon="@Icons.Material.Filled.LocalShipping">INBOUND</MudNavLink>
                <MudNavLink Href="@Storing_Url" Icon="@Icons.Material.Filled.Storage">STORING</MudNavLink>
                <MudNavLink Href="@Inventory_Url" Icon="@Icons.Material.Filled.Inventory">INVENTORY</MudNavLink>
@*                <MudNavLink Href="@Maintenance_Url" Icon="@Icons.Material.Filled.Repartition">MAINTENANCE</MudNavLink>
*@                <MudNavLink Href="@Outbound_Url" Icon="@Icons.Material.Filled.Outbound">OUTBOUND</MudNavLink>
@*                <MudNavLink Href="@Ga_Url" Icon="@Icons.Material.Filled.CleaningServices">GA</MudNavLink>
*@            </MudNavGroup>
         <MudNavLink OnClick="@Logoutbtn" Icon="@Icons.Material.Filled.Logout">LOGOUT</MudNavLink>
        </div>
    </MudNavMenu>
</MudPaper>

@*<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
*@   @* <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Home" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="AHI/D_INBOUND">
                <span class="oi oi-plus" aria-hidden="true"></span> INBOUND
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>
*@
@*<SfSidebar Position="SidebarPosition.Left" Type="SidebarType.Auto" ShowBackdrop="true" >
    <ChildContent>
    <SfAccordion ExpandMode="ExpandMode.Single">
        <AccordionItems>
            <AccordionItem Header="HOME" Content="HOME" ></AccordionItem>
        	  
        </AccordionItems>
    </SfAccordion>            
    </ChildContent>
</SfSidebar>
@*</div>
*@
@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    bool _isExpanded = false;
    public string Inbound_Url { get; set; }
    public string Outbound_Url { get; set; }
    public string Ga_Url { get; set; }
    public string Storing_Url { get; set; }
    public string Maintenance_Url { get; set; }
    public string Inventory_Url { get; set; }

    protected override async Task OnInitializedAsync()
    {

        NavMenuAttribut.Facility = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "BusinesUnit");

        if (NavMenuAttribut.Facility == "DC HCI JABABEKA")
        {
            NavMenuAttribut.BU = "HCI";
        }
        if (NavMenuAttribut.Facility == "DC AHI JABABEKA")
        {
            NavMenuAttribut.BU = "AHI";
        }
        if (NavMenuAttribut.Facility == "DC HCI CIKUPA")
        {
            NavMenuAttribut.BU = "HCI_CKP";
        }
        if (NavMenuAttribut.Facility == "DC KLS JABABEKA")
        {
            NavMenuAttribut.BU = "KLS";
        }


        Inbound_Url = $"/{NavMenuAttribut.BU}{NavMenuAttribut.Inbound_Url}";
        Storing_Url = $"/{NavMenuAttribut.BU}{NavMenuAttribut.Storing_Url}";
        Outbound_Url = $"/{NavMenuAttribut.BU}{NavMenuAttribut.Outbound_Url}";
        Inventory_Url = $"/{NavMenuAttribut.BU}{NavMenuAttribut.Inventory_Url}";
        Maintenance_Url = $"/{NavMenuAttribut.BU}{NavMenuAttribut.Maintenance_Url}";
        Ga_Url = $"/{NavMenuAttribut.BU}{NavMenuAttribut.Ga_Url}";
    }


    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public void Logoutbtn()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to Logout ?");
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", Color.Error);

        var options = new MudBlazor.DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };

        DialogService.Show<Logout_Dialog>("LOGOUT", parameters, options);
    }

}
